!    -*- f90 -*-
! Note: the context of this file is case sensitive.

subroutine parratt_born(q,lambda,d,rho,beta,sigma,rgen,rgenr,m,n) ! in xrRef.f90
    double precision dimension(m + 1) :: q
    double precision :: lambda
    double precision dimension(n + 2) :: d
    double precision dimension(n + 2),depend(n) :: rho
    double precision dimension(n + 2),depend(n) :: beta
    double precision dimension(n + 2),depend(n) :: sigma
    double precision dimension(m + 1),depend(m) :: rgen
    double complex dimension(m + 1),depend(m) :: rgenr
    integer, optional,check((len(q)-1)>=m),depend(q) :: m=(len(q)-1)
    integer, optional,check((len(d)-2)>=n),depend(d) :: n=(len(d)-2)
end subroutine parratt_born
subroutine parratt(q,lambda,d,rho,beta,rgen,rgenr,m,n) ! in xrRef.f90
    double precision dimension(m + 1) :: q
    double precision :: lambda
    double precision dimension(n + 2) :: d
    double precision dimension(n + 2),depend(n) :: rho
    double precision dimension(n + 2),depend(n) :: beta
    double precision dimension(m + 1),depend(m) :: rgen
    double complex dimension(m + 1),depend(m) :: rgenr
    integer, optional,check((len(q)-1)>=m),depend(q) :: m=(len(q)-1)
    integer, optional,check((len(d)-2)>=n),depend(d) :: n=(len(d)-2)
end subroutine parratt
subroutine parratt_mat(q,lambda,d,rho,beta,rgen,tgen,m,n) ! in xrRef.f90
    double precision dimension(m + 1) :: q
    double precision :: lambda
    double precision dimension(n + 2) :: d
    double precision dimension(n + 2),depend(n) :: rho
    double precision dimension(n + 2),depend(n) :: beta
    double complex dimension(m + 1),depend(m) :: rgen
    double complex dimension(m + 1),depend(m) :: tgen
    integer, optional,check((len(q)-1)>=m),depend(q) :: m=(len(q)-1)
    integer, optional,check((len(d)-2)>=n),depend(d) :: n=(len(d)-2)
end subroutine parratt_mat
subroutine conv_parratt(q,delq,lambda,d,rho,beta,rgen,m,n) ! in xrRef.f90
    double precision dimension(m + 1) :: q
    double precision :: delq
    double precision :: lambda
    double precision dimension(n + 2) :: d
    double precision dimension(n + 2),depend(n) :: rho
    double precision dimension(n + 2),depend(n) :: beta
    double precision dimension(m + 1),depend(m) :: rgen
    integer, optional,check((len(q)-1)>=m),depend(q) :: m=(len(q)-1)
    integer, optional,check((len(d)-2)>=n),depend(d) :: n=(len(d)-2)
end subroutine conv_parratt

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
